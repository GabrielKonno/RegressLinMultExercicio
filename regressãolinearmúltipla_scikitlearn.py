# -*- coding: utf-8 -*-
"""RegressãoLinearMúltipla_ScikitLearn_exercício

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a9uX6A_wa5VWh1CXnZehCLFsw3OdBkKr
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import MinMaxScaler

import statsmodels.formula.api as smf

df = pd.read_csv('CarPrice_Assignment.csv')

df.head()

df.info()

df.describe()

df['car_ID'] = df['car_ID'].astype(str)
df['CarName'] = df['CarName'].astype(str)
df.info()

df.head()

le = LabelEncoder()

# CarName
le.fit(df.CarName)
df.CarName = le.transform(df.CarName)

# FuelType
le.fit(df.fueltype)
df.fueltype = le.transform(df.fueltype)

# Aspiration
le.fit(df.aspiration)
df.aspiration = le.transform(df.aspiration)

# DoorNumber
le.fit(df.doornumber)
df.doornumber = le.transform(df.doornumber)

# CarBody
le.fit(df.carbody)
df.carbody = le.transform(df.carbody)

# Drivewheel
le.fit(df.drivewheel)
df.drivewheel = le.transform(df.drivewheel)

# EngineLoc
le.fit(df.enginelocation)
df.enginelocation = le.transform(df.enginelocation)

# EngineType
le.fit(df.enginetype)
df.enginetype = le.transform(df.enginetype)

# CylinderNum
le.fit(df.cylindernumber)
df.cylindernumber = le.transform(df.cylindernumber)

# FuelSys
le.fit(df.fuelsystem)
df.fuelsystem = le.transform(df.fuelsystem)

# FuelSys
le.fit(df.fuelsystem)
df.fuelsystem = le.transform(df.fuelsystem)

df.head()

sns.histplot(data=df, x="price", kde=True)

df.describe()

scaler = MinMaxScaler()


df_norm = pd.DataFrame(scaler.fit_transform(df), index=df.index, columns=df.columns)

df_norm.describe()

sns.histplot(data=df_norm, x="price", kde=True)

sns.histplot(data=df_norm, x="CarName", kde=True)

df_norm.info()

"""car_ID            205 non-null    float64
 1            205 non-null    float64
 2             205 non-null    float64
 3           205 non-null    float64
 4           205 non-null    float64
 5              205 non-null    float64
 6           205 non-null    float64
 7       205 non-null    float64
 8            205 non-null    float64
 9            205 non-null    float64
 10            205 non-null    float64
 11           205 non-null    float64
 12          205 non-null    float64
 13          205 non-null    float64
 14      205 non-null    float64
 15          205 non-null    float64
 16          205 non-null    float64
 17           205 non-null    float64
 18              205 non-null    float64
 19    205 non-null    float64
 20          205 non-null    float64
 21             205 non-null    float64
 22             205 non-null    float64
 23  
 24       



"""

#modelo MRLS
function = 'price~CarName+highwaympg+citympg+peakrpm+horsepower+compressionratio+stroke+boreratio+fuelsystem+enginesize+cylindernumber+enginetype+curbweight+carheight+carwidth+carlength+wheelbase+enginelocation+drivewheel+carbody+doornumber+aspiration+fueltype+symboling'
model = smf.ols(formula=function, data=df_norm).fit()
print(model.summary())

#modelo MRLS
function = 'price~CarName+highwaympg+citympg+peakrpm+horsepower+compressionratio+stroke+boreratio+fuelsystem+enginesize+cylindernumber+enginetype+curbweight+carheight+carwidth+carlength+wheelbase+enginelocation+drivewheel+carbody+doornumber+aspiration+symboling'
model = smf.ols(formula=function, data=df_norm).fit()
print(model.summary())

#modelo MRLS
function = 'price~CarName+highwaympg+citympg+peakrpm+horsepower+compressionratio+stroke+boreratio+fuelsystem+enginesize+cylindernumber+enginetype+curbweight+carheight+carwidth+carlength+wheelbase+enginelocation+drivewheel+carbody+doornumber+aspiration'
model = smf.ols(formula=function, data=df_norm).fit()
print(model.summary())

#modelo MRLS
function = 'price~CarName+highwaympg+citympg+peakrpm+horsepower+compressionratio+stroke+boreratio+fuelsystem+enginesize+cylindernumber+enginetype+curbweight+carheight+carwidth+wheelbase+enginelocation+drivewheel+carbody+doornumber+aspiration'
model = smf.ols(formula=function, data=df_norm).fit()
print(model.summary())

#modelo MRLS
function = 'price~CarName+highwaympg+citympg+peakrpm+horsepower+compressionratio+stroke+boreratio+enginesize+cylindernumber+enginetype+curbweight+carheight+carwidth+wheelbase+enginelocation+drivewheel+carbody+doornumber+aspiration'
model = smf.ols(formula=function, data=df_norm).fit()
print(model.summary())

#modelo MRLS
function = 'price~CarName+highwaympg+citympg+peakrpm+horsepower+compressionratio+stroke+boreratio+enginesize+enginetype+curbweight+carheight+carwidth+wheelbase+enginelocation+drivewheel+carbody+doornumber+aspiration'
model = smf.ols(formula=function, data=df_norm).fit()
print(model.summary())

#modelo MRLS
function = 'price~CarName+highwaympg+peakrpm+horsepower+compressionratio+stroke+boreratio+enginesize+enginetype+curbweight+carheight+carwidth+wheelbase+enginelocation+drivewheel+carbody+doornumber+aspiration'
model = smf.ols(formula=function, data=df_norm).fit()
print(model.summary())

#modelo MRLS
function = 'price~CarName+highwaympg+peakrpm+horsepower+compressionratio+stroke+boreratio+enginesize+enginetype+curbweight+carheight+carwidth+wheelbase+enginelocation+drivewheel+carbody+doornumber'
model = smf.ols(formula=function, data=df_norm).fit()
print(model.summary())

#modelo MRLS
function = 'price~CarName+peakrpm+horsepower+compressionratio+stroke+boreratio+enginesize+enginetype+curbweight+carheight+carwidth+wheelbase+enginelocation+drivewheel+carbody+doornumber'
model = smf.ols(formula=function, data=df_norm).fit()
print(model.summary())

#modelo MRLS
function = 'price~CarName+peakrpm+horsepower+compressionratio+stroke+boreratio+enginesize+enginetype+curbweight+carheight+carwidth+wheelbase+enginelocation+drivewheel+carbody+doornumber-1'
model = smf.ols(formula=function, data=df_norm).fit()
print(model.summary())

#modelo MRLS
function = 'price~CarName+peakrpm+horsepower+compressionratio+stroke+boreratio+enginesize+curbweight+carheight+carwidth+wheelbase+enginelocation+drivewheel+carbody+doornumber-1'
model = smf.ols(formula=function, data=df_norm).fit()
print(model.summary())

#modelo MRLS
function = 'price~CarName+peakrpm+horsepower+compressionratio+stroke+boreratio+enginesize+curbweight+carheight+carwidth+enginelocation+drivewheel+carbody+doornumber-1'
model = smf.ols(formula=function, data=df_norm).fit()
print(model.summary())

#modelo MRLS
function = 'price~CarName+peakrpm+horsepower+compressionratio+stroke+enginesize+curbweight+carheight+carwidth+enginelocation+drivewheel+carbody+doornumber-1'
model = smf.ols(formula=function, data=df_norm).fit()
print(model.summary())

x = df_norm[['CarName', 'peakrpm', 'horsepower', 'compressionratio', 'stroke', 'enginesize', 'curbweight', 'carheight', 'carwidth', 'enginelocation', 'drivewheel', 'carbody', 'doornumber']]

y = df_norm[["price"]]

#Separando os dados de Treino e Teste
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

#Criando um Objeto de Regressão Linear
lr = LinearRegression()

#Treinando o Modelo
lr.fit(x_train,y_train)

# R²
r_sq = lr.score(x, y)
print('Coeficiente de Determinação (R²):', r_sq)

# MAE, MSE, RMSE TRAIN
y_pred_train = lr.predict(x_train)
print('MAE:', metrics.mean_absolute_error(y_train, y_pred_train))
print('MSE:', metrics.mean_squared_error(y_train, y_pred_train))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_train, y_pred_train)))

# MAE, MSE, RMSE Teste
y_pred = lr.predict(x_test)
print('MAE:', metrics.mean_absolute_error(y_test, y_pred))
print('MSE:', metrics.mean_squared_error(y_test, y_pred))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

